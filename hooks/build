#!/usr/bin/env sh

# Set good defaults to allow script to be run by hand. The two variables below
# will never be used when run from within the Docker hub.
DOCKER_REPO=${DOCKER_REPO:-"efrecon/mosquitto"}
SOURCE_COMMIT=${SOURCE_COMMIT:-$(git log --no-decorate|grep '^commit'|head -n 1| awk '{print $2}')}

im="eclipse-mosquitto"

# shellcheck disable=SC1090
. "$(dirname "$0")/reg-tags/image_tags.sh"

# Login at the Docker hub to be able to access info about the image.
token=$(img_auth "$DOCKER_REPO")

# For all tags of the original image (as in library image) that this image
# builds upon, rebuild only if relevant. We use the OCI revision annotation to
# store/detect whenever it is necessary to rebuild.
for tag in $(img_tags \
                --filter '[0-9]+(\.[0-9]+)+$' \
                --verbose \
                -- \
                "$im"); do
    # Get the revision out of the org.opencontainers.image.revision label, this
    # will be the label where we store information about this repo (it cannot be
    # the tag, since we tag as the base image).
    revision=$(img_labels --verbose --token "$token" -- "$DOCKER_REPO" "$tag" |
                grep "^org.opencontainers.image.revision" |
                sed -E 's/^org.opencontainers.image.revision=(.+)/\1/')
    # If the revision is different from the source commit (including empty,
    # which will happen when our version of the image does not already exist),
    # build the image, making sure we label with the git commit sha at the
    # org.opencontainers.image.revision OCI label, but using the same tag as the
    # library image.
    if [ "$revision" != "$SOURCE_COMMIT" ]; then
        echo "============== No ${DOCKER_REPO}:$tag at $SOURCE_COMMIT"
        docker build \
            --build-arg MOSQUITTO_VERSION="$tag" \
            --tag "${DOCKER_REPO}:$tag" \
            --label "org.opencontainers.image.revision=$SOURCE_COMMIT" \
            .
    fi
done
